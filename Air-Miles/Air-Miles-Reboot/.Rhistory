st1 <- head(fileNames)
st1
gsub("([[:alpha:]]+)-([[:digit:]]+)-", "\\2", st1)
gsub("([[:alpha:]]+)-([[:digit:]]+)-([[:digit]]+)\\.CSV", "\\2", st1)
gsub("([[:alpha:]]+)-([[:digit:]]+)-([[:digit]]+)", "\\2", st1)
gsub("([[:alpha:]]+)-([[:digit:]]+)-([[:digit:]]+)\\.CSV", "\\2", st1)
fileInfoDf <- data.frame(filePath = reqFiles, fullName = fileNames, dates = gsub("([[:alpha:]]+)-([[:digit:]]+)-([[:digit:]]+)\\.CSV", "\\2", fileNames))
fileInfoDf <- fileInfoDf[order(fileInfoDf$dates, decreasing = TRUE), ]
View(fileInfoDf)
filesPath <- "Y:\\Magrabi"
reqFiles <- list.files(path = filesPath, pattern = ".CSV$", full.names = TRUE)
fileNames <- gsub(".+/", "", reqFiles)
fileInfoDf <- data.frame(filePath = reqFiles, fullName = fileNames, dates = gsub("([[:alpha:]]+)-([[:digit:]]+)-([[:digit:]]+)\\.CSV", "\\2", fileNames))
fileInfoDf <- fileInfoDf[order(fileInfoDf$dates, decreasing = TRUE), ]
#Retrieving files' info
reqFilesDf <- file.info(fileInfoDf$filePath[1:7])
head(fileInfoDf)
?file.info
fileInfoDf$filePath[1:7]
fileInfoDf <- data.frame(filePath = reqFiles, fullName = fileNames, dates = gsub("([[:alpha:]]+)-([[:digit:]]+)-([[:digit:]]+)\\.CSV", "\\2", fileNames),
stringsAsFactors = FALSE)
fileInfoDf <- fileInfoDf[order(fileInfoDf$dates, decreasing = TRUE), ]
#Retrieving files' info
reqFilesDf <- file.info(fileInfoDf$filePath[1:7])
reqFilesDf$size <- reqFilesDf$size/1000
reqFilesDf$modifToday <- as.Date(reqFilesDf$mtime) == Sys.Date() & reqFilesDf$size > 1
reqFilesDf$fileNames <- fileNames
filesGenToday <- reqFilesDf %>% filter(as.Date(mtime) == Sys.Date()) %>% select(fileNames) %>% unlist()
filesToInspect <- reqFiles[sapply(filesGenToday, function(y) grep(pattern = y, x = reqFiles))]
dataToInspect <- sapply(filesToInspect, readLines)
dfToInspect <- lapply(dataToInspect, function(x) read.delim(text = x, header = TRUE, sep = "|"))
dfStat <- lapply(dfToInspect, dim)
dfRows <- paste("Number of Rows:", sapply(dfStat, "[", 1), sep = " ")
dfCols <- paste("Number of Columns:", sapply(dfStat, "[", 2), sep = " ")
filesGenToday <- paste(filesGenToday, dfRows, dfCols, sep = "     ")
filesGenToday <- paste(seq(from = 1, by = 1, to = length(filesGenToday)), filesGenToday, sep = ". ", collapse = "\n")
filesGenTodayMessage <- paste("\nFile(s) that were received today from Magrabi are:",  filesGenToday, sep = "\n\n", collapse = "\n")
filesGenTodayMessage <- ifelse(length(filesGenToday) == 0, "No files have been generated today.", filesGenTodayMessage)
autoMessage <- "This is an automated message."
completeMessage <- paste(autoMessage, filesGenTodayMessage, sep = "\n\n")
#Sending an email for status of our files
## init com api
OutApp <- COMCreate("Outlook.Application")
## create an email
outMail = OutApp$CreateItem(0)
## configure  email parameter
outMail[["To"]] = "aliarsalan.kazmi@aimia.com"
reqFilesDf <- file.info(fileInfoDf$filePath[1:7])
reqFilesDf$size <- reqFilesDf$size/1000
reqFilesDf$modifToday <- as.Date(reqFilesDf$mtime) == Sys.Date() & reqFilesDf$size > 1
lastFileInfoDf <- fileInfoDf[1:7, ]
#Retrieving files' info
reqFilesDf <- file.info(lastFileInfoDf$filePath[1:7])
reqFilesDf$size <- reqFilesDf$size/1000
reqFilesDf$modifToday <- as.Date(reqFilesDf$mtime) == Sys.Date() & reqFilesDf$size > 1
reqFilesDf$fileNames <- lastFileInfoDf$fullName
filesGenToday <- reqFilesDf %>% filter(as.Date(mtime) == Sys.Date()) %>% select(fileNames) %>% unlist()
filesToInspect <- reqFiles[sapply(filesGenToday, function(y) grep(pattern = y, x = reqFiles))]
dataToInspect <- sapply(filesToInspect, readLines)
dfToInspect <- lapply(dataToInspect, function(x) read.delim(text = x, header = TRUE, sep = "|"))
dfStat <- lapply(dfToInspect, dim)
dfRows <- paste("Number of Rows:", sapply(dfStat, "[", 1), sep = " ")
dfCols <- paste("Number of Columns:", sapply(dfStat, "[", 2), sep = " ")
filesGenToday <- paste(filesGenToday, dfRows, dfCols, sep = "     ")
filesGenToday <- paste(seq(from = 1, by = 1, to = length(filesGenToday)), filesGenToday, sep = ". ", collapse = "\n")
filesGenTodayMessage <- paste("\nFile(s) that were received today from Magrabi are:",  filesGenToday, sep = "\n\n", collapse = "\n")
filesGenTodayMessage <- ifelse(length(filesGenToday) == 0, "No files have been generated today.", filesGenTodayMessage)
autoMessage <- "This is an automated message."
completeMessage <- paste(autoMessage, filesGenTodayMessage, sep = "\n\n")
OutApp <- COMCreate("Outlook.Application")
## create an email
outMail = OutApp$CreateItem(0)
## configure  email parameter
outMail[["To"]] = "aliarsalan.kazmi@aimia.com"
outMail[["subject"]] = "Magrabi File Management (Notification)"
outMail[["body"]] = completeMessage
## send it
outMail$Send()
myFile <- "C:\\Users\\kazami\\Desktop\\DB_AM_MEM_DTL.txt"
ftpUploadFile <- paste("ftp://transfer3.silverpop.com/upload",
outputFileName, sep = "/")
outputFileName <- "DB_AM_MEM_DTL.txt"
ftpUploadFile <- paste("ftp://transfer3.silverpop.com/upload",
outputFileName, sep = "/")
ftpUploadFile
myFile
handle <- getCurlHandle()
ftpUpload(what = myFile, to = ftpUploadFile, userpwd = "aliarsalan.kazmi@aimia.com:Iamneo456_", curl = handle)
library(RCurl)
handle <- getCurlHandle()
ftpUpload(what = myFile, to = ftpUploadFile, userpwd = "aliarsalan.kazmi@aimia.com:Iamneo456_", curl = handle)
source(file = 'C:\\Users\\kazami\\Desktop\\Aimia\\SilverPop\\Connect_SSTP.R')
rm(list = ls())
library(RODBC)
library(dplyr)
library(RCurl)
library(lubridate)
#Connect to VPN
source(file = 'C:\\Users\\kazami\\Desktop\\Aimia\\SilverPop\\Connect_SSTP.R')
outputDir <- "Z:\\SILVERPOP"
outputFileName <- "DB_AM_MEM_DTL_TO_BE_CLOSED.TXT"
outputFile <- paste(outputDir, outputFileName, sep = "/")
#Connecting to Insights database in RMMEL 10
odbcChannel <- odbcConnect("Rmmel10_Insights")
#running our stored proc
system.time(amDB <- sqlQuery(channel = odbcChannel, query = "EXEC sp_silverpop_members_closed_accounts"))
98/60
amDB
outputDir <- "Z:\\SILVERPOP"
outputFileName <- "RT_HSBC_BESPOKE_F60_JOURNEY.TXT"
outputFile <- paste(outputDir, outputFileName, sep = "/")
#Connecting to Insights database in RMMEL 10
odbcChannel <- odbcConnect("Rmmel10_Insights")
#running our stored proc
system.time(amDB <- sqlQuery(channel = odbcChannel, query = "EXEC sp_silverpop_member_hsbc_bespoke_f60_journey"))
amDB
source(file = 'C:\\Users\\kazami\\Desktop\\Aimia\\SilverPop\\Connect_SSTP.R')
#Step 2. Checking whether exported files have been converted successfully
#Setting up directory path in which Stored Procs generate result
filesPath <- "Z:\\SILVERPOP"
reqFiles <- list.files(path = filesPath, pattern = ".TXT$", full.names = TRUE)
fileNames <- gsub(".+/", "", reqFiles)
#Retrieving files' info
reqFilesDf <- file.info(reqFiles)
reqFilesDf$size <- reqFilesDf$size/1000
reqFilesDf$modifToday <- as.Date(reqFilesDf$mtime) == Sys.Date() & reqFilesDf$size > 1
reqFilesDf$fileNames <- fileNames
filesGenToday <- reqFilesDf %>% filter(as.Date(mtime) == Sys.Date()) %>% select(fileNames) %>% unlist()
filesGenToday <- paste(seq(from = 1, by = 1, to = length(filesGenToday)), filesGenToday, sep = ". ", collapse = "\n")
filesGenTodayMessage <- paste("\nFile(s) that have been modified today and have been converted to ASCII:",  filesGenToday, sep = "\n\n", collapse = "\n")
filesGenTodayMessage <- ifelse(length(filesGenToday) == 0, "No files have been converted today.", filesGenTodayMessage)
library(dplyr)
#Setting up directory path in which Stored Procs generate result
filesPath <- "Z:\\SILVERPOP"
reqFiles <- list.files(path = filesPath, pattern = ".TXT$", full.names = TRUE)
fileNames <- gsub(".+/", "", reqFiles)
#Retrieving files' info
reqFilesDf <- file.info(reqFiles)
reqFilesDf$size <- reqFilesDf$size/1000
reqFilesDf$modifToday <- as.Date(reqFilesDf$mtime) == Sys.Date() & reqFilesDf$size > 1
reqFilesDf$fileNames <- fileNames
filesGenToday <- reqFilesDf %>% filter(as.Date(mtime) == Sys.Date()) %>% select(fileNames) %>% unlist()
filesGenToday <- paste(seq(from = 1, by = 1, to = length(filesGenToday)), filesGenToday, sep = ". ", collapse = "\n")
filesGenTodayMessage <- paste("\nFile(s) that have been modified today and have been converted to ASCII:",  filesGenToday, sep = "\n\n", collapse = "\n")
filesGenTodayMessage <- ifelse(length(filesGenToday) == 0, "No files have been converted today.", filesGenTodayMessage)
library(RODBC)
library(dplyr)
library(RCurl)
library(lubridate)
#Connect to VPN and load my FTP credentials
source(file = 'C:\\Users\\kazami\\Desktop\\Aimia\\SilverPop\\Connect_SSTP.R')
source(file = 'C:\\Users\\kazami\\Desktop\\Aimia\\SilverPop\\ftpCredentials.R')
#inputDir <- "Z:\\SILVERPOP\\Silverpop_Files_Created\\Seedlist"
#Identify files
#myFile <- list.files(path = inputDir, full.names = TRUE)
#Read file in
#fileInput <- readLines(con <- file(myFile, encoding = "UCS-2LE"))
#fileCleaned <- gsub("-+", "", fileInput)
#zeroSize <- unname(sapply(fileCleaned, function(x) nchar(x) == 0))
#fileCleaned <- fileInput[!zeroSize]
#unnecessaryRows <- grepl("Job|record|affected", fileCleaned, ignore.case = TRUE)
#fileCleaned <- fileCleaned[!unnecessaryRows]
outputDir <- "Z:\\SILVERPOP\\Monthly Statement"
outputFileNames <- c("DB_AM_MEM_DTL_STATEMENT_EGYPT.TXT", "DB_AM_MEM_DTL_STATEMENT_OMAN.TXT", "DB_AM_MEM_DTL_STATEMENT_LEBANON.TXT",
"DB_AM_MEM_DTL_STATEMENT_BAHRAIN.TXT", "DB_AM_MEM_DTL_STATEMENT_QATAR.TXT", "DB_AM_MEM_DTL_STATEMENT_UAE.TXT")
outputFiles <- paste(outputDir, outputFileNames, sep = "/")
#Connecting to Insights database in RMMEL 10
odbcChannel <- odbcConnect("Rmmel10_Insights")
#Forming our stored proc statements
storedProc <- "EXEC sp_silverpop_member_last_statement"
spArg <- "@country ="
countries <- c("Egypt", "Oman", "Lebanon", "Bahrain", "Qatar", "UAE")
fullStoredProc <- paste(storedProc, spArg, countries, sep = " ")
#running our stored proc
system.time(amMonthlyStatement <- sapply(fullStoredProc, function(x) sqlQuery(channel = odbcChannel, query = x, as.is = TRUE)))
1073.82
length(countries) == length(amMonthlyStatement)
#Close database connection
odbcCloseAll()
#re-formatting our results and exporting them
amMSFormat <- sapply(amMonthlyStatement, function(x) paste0(x, collapse = "\n"), simplify = FALSE)
mapply(FUN = writeLines, text = amMSFormat, con = outputFiles)
#Uploading it to FTP Server for Silverpop
ftpUploadFiles <- paste("ftp://transfer3.silverpop.com/upload",
outputFileNames, sep = "/")
handle <- getCurlHandle()
mapply(FUN = function(...){
ftpUpload(..., userpwd = ftpCredentials, curl = handle)},
what = outputFiles, to = ftpUploadFiles)
columnNames <- amMonthlyStatement[[1]][1]
amMonthlySttmntCleaned <- lapply(amMonthlyStatement, function(y) gsub(pattern = columnNames, replacement = "", x = y))
amMSunlisted <- unlist(amMonthlySttmntCleaned)
rm(amMonthlySttmntCleaned)
colLengths <- summary(nchar(amMSunlisted))
amMSRequired <- amMSunlisted[!nchar(amMSunlisted) == colLengths[1]]
amMSRequired <- c(columnNames, amMSRequired)
allData <- paste0(amMSRequired, collapse = "\n")
rm(amMSRequired, amMSunlisted)
#Export the file
writeLines(text = allData, con = paste(outputDir, "DB_AM_MEM_DTL_STATEMENT.TXT", sep = "/"))
?write.table
allData <- read.table(text = allData, header = TRUE, sep = "|", stringsAsFactors = FALSE)
allData$generatedOn <- dmy(gsub(".+ to ", "", allData$statement_period))
summDataCountry <- allData %>% group_by(country, generatedOn) %>% summarise(totalRecords = n(), uniqueCustomers = n_distinct(card_no))
summDataAct <- allData %>% group_by(act, generatedOn) %>% summarise(totalRecords = n(), uniqueCustomers = n_distinct(card_no))
#Export summary files
write.table(x = summDataCountry, file = paste(outputDir, "Summary_by_Country.TXT", sep = "/"), row.names = FALSE, col.names = FALSE, append = TRUE)
write.table(x = summDataAct, file = paste(outputDir, "Summary_by_Act.TXT", sep = "/"), row.names = FALSE, col.names = FALSE, append = TRUE)
USArrests
rm(list = ls())
Sys.date()
Sys.Date()
class(Sys.Date())
day(Sys.Date())
#Step 2. Checking whether exported files have been converted successfully
#Setting up directory path in which Stored Procs generate result
filesPath <- "Z:\\SILVERPOP\\Silverpop_Files_Created\\Databases"
reqFiles <- list.files(path = filesPath, pattern = ".TXT$", full.names = TRUE)
reqFiles
?grepl
?grepl
reqFiles[!grepl(pattern = "STATEMENT", x = reqFiles]
reqFiles[!grepl(pattern = "STATEMENT", x = reqFiles)]
#Step 2. Checking whether exported files have been converted successfully
#Setting up directory path in which Stored Procs generate result
filesPath <- "Z:\\SILVERPOP\\Silverpop_Files_Created\\Databases"
reqFiles <- list.files(path = filesPath, pattern = ".TXT$", full.names = TRUE)
if(!day(Sys.date()) == 3){
reqFiles <- reqFiles[!grepl(pattern = "STATEMENT", x = reqFiles)]}
fileNames <- gsub(".+/", "", reqFiles)
#Retrieving files' info
reqFilesDf <- file.info(reqFiles)
reqFilesDf$size <- reqFilesDf$size/1000
reqFilesDf$modifToday <- as.Date(reqFilesDf$mtime) == Sys.Date() & reqFilesDf$size > 1
reqFilesDf$fileNames <- fileNames
filesError <- reqFilesDf %>% filter(as.Date(mtime) == Sys.Date(), size <= 1) %>% select(fileNames) %>% unlist()
reqFiles <- list.files(path = filesPath, pattern = ".TXT$", full.names = TRUE)
reqFiles
codePath <- "C:\\Users\\Kazmi\\Desktop\\Aimia\\Silverpop\\Daily\\"
codePath
paste(codePath, "ok", sep = "/")
paste0(codePath, "ok")
filesPath <- c("Z:\\SILVERPOP\\Silverpop_Files_Created\\Databases", "Z:\\SILVERPOP\\Silverpop_Files_Created\\Relational_Tables")
reqFiles <- unlist(sapply(filesPath, function(x)list.files(path = x, pattern = ".TXT$", full.names = TRUE)))
reqFiles
unname(reqFiles)
reqFiles[!grepl(pattern = "STATEMENT|SEGMENTATION", x = reqFiles)]
unname(reqFiles[!grepl(pattern = "STATEMENT|SEGMENTATION", x = reqFiles)])
unname(reqFiles)
library(httr)
library(dplyr)
#Copying required credentials from Silverpop
##Application Name:    Ali's app for API access
##Client ID:	2fb47a91-3e34-4b2f-b9b5-93cffbf31500
##Client Secret:	5b5aa1d0-9fcd-4740-b970-79b059c32a74
##Refresh Token: rDI5XuVASIqwIOOeJdRHYC71vrLvci64kE1JgDipG8BAS1
#The following from IBM website is incorrect, use the alternate provided
ibmUrl <- "https://api3.ibmmarketingcloud/oauth/token"
ibmUrl <- "https://api3.ibmmarketingcloud.com/oauth/token"
clientId <- "2fb47a91-3e34-4b2f-b9b5-93cffbf31500"
clientSecret <- "5b5aa1d0-9fcd-4740-b970-79b059c32a74"
refreshToken <- "rDI5XuVASIqwIOOeJdRHYC71vrLvci64kE1JgDipG8BAS1"
#Request authentication (access token)
reqAccess <- POST(url = ibmUrl,
body = list(grant_type = "refresh_token", client_id = clientId,
client_secret = clientSecret, refresh_token = refreshToken), verbose())
warn_for_status(reqAccess)
access_token <- content(reqAccess)$access_token
#database/table id <- 3874161
#account_no <- 4241
<SelectRecipientData>
<LIST_ID>45654</LIST_ID>
<EMAIL>someone@adomain.com</EMAIL>
<COLUMN>
<NAME>Customer Id</NAME>
<VALUE>123-45-6789</VALUE>
</COLUMN>
</SelectRecipientData>
</Body>
</Envelope>
ibmUrl <- "api3.silverpop.com/XMLAPI"
body1 <- "<Envelope><Body>
<Login>
<USERNAME>aliarsalan.kazmi@aimia.com</USERNAME>
<PASSWORD>Iamneo456_</PASSWORD>
</Login>
</Body></Envelope>"
body1
test1 <- POST(url = ibmUrl,
body = body1, verbose())
content(test1)
test1 <- POST(url = ibmUrl,
body = body1, verbose())
test1 <- POST(url = ibmUrl,
body = body1, verbose(), add_headers(Content-Length: 225))
?add_header
?add_headers
test1 <- POST(url = ibmUrl,
body = body1, verbose(), add_headers(Content-Length = 225))
test1 <- POST(url = ibmUrl,
body = body1, verbose(), add_headers(Content-Type = "application/x-www-form-urlencoded"))
test1 <- POST(url = ibmUrl,
body = body1, verbose(), add_headers(Content-Type = "application/x-www-form-urlencoded"))
GET("http://httpbin.org/headers",
add_headers(version = version$version.string), verbose())
r1 <- POST(url = ibmUrl,
body = list(VISIBILITY = 1, LIST_TYPE = 2, grant_type = "refresh_token", client_id = clientId,
client_secret = clientSecret, refresh_token = refreshToken), verbose(), add_headers(Authorization = access_token))
r1 <- POST(url = ibmUrl,
body = list(VISIBILITY = 1, LIST_TYPE = 2, grant_type = "refresh_token", client_id = clientId,
client_secret = clientSecret, refresh_token = refreshToken), verbose(), add_headers(Authorization = access_token, Content-Type = "application/x-www-form-urlencoded"))
r1 <- POST(url = ibmUrl,
body = list(VISIBILITY = 1, LIST_TYPE = 2, grant_type = "refresh_token", client_id = clientId,
client_secret = clientSecret, refresh_token = refreshToken), verbose(), add_headers(Authorization = access_token))
r1 <- POST(url = ibmUrl,
body = list(VISIBILITY = 1, LIST_TYPE = 2, grant_type = "refresh_token", client_id = clientId,
client_secret = clientSecret, refresh_token = refreshToken), verbose(), add_headers(Content-Type = access_token))
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("application/x-www-form-urlencoded"))
content(test1)
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("application/x-www-form-urlencoded"))
?POST
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type_xml())
content(test1)
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("application/x-www-form-urlencoded"))
content(test1)
library(httr)
r <- POST("http://www.datasciencetoolkit.org/text2people",
body = "Tim O'Reilly, Archbishop Huxley")
stop_for_status(r)
content(r, "parsed", "application/json")
install.packages("httpRequest")
handle <- getCurlHandle()
?getCurl
library(RCurl)
handle <- getCurlHandle()
handle
handle <- getCurlHandle()
t1 <- postForm(uri = ibmUrl, .params = body1, curl = handle)
handle <- getCurlHandle()
t1 <- postForm(uri = ibmUrl, .params = list(body1), curl = handle)
body1 <- "<Envelope><Body>
<Login>
<USERNAME>aliarsalan.kazmi@aimia.com</USERNAME>
<PASSWORD>Iamneo456_</PASSWORD>
</Login>
</Body></Envelope>"
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("application/x-www-form-urlencoded"))
test1
GET(ibmUrl)
r <- GET(ibmUrl)
status_code(r)
headers(r)
str(content(r))
http_status(r)
content(r)
content(r, encoding = "text")
content(r, encoding = "raw")
headers(r)
body1 <- "<Envelope><Body><Login><USERNAME>aliarsalan.kazmi@aimia.com</USERNAME><PASSWORD>Iamneo456_</PASSWORD></Login></Body></Envelope>"
t1 <- postForm(uri = ibmUrl, .params = body1, curl = handle)
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("application/x-www-form-urlencoded"))
content(test1)
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("application/x-www-form-urlencoded"))
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("text/xml"))
content(test1)
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("text/xml"))
content(test1)
?content
content(test1, as = "text")
content(test1, as = "raw")
content(test1, as = "parsed")
content(test1, type = xmlTreeParse)
content(test1, type = text/xml)
content(test1, type = "text/xml")
content(test1, type = "text/html")
content(test1, type = "text/csv")
content(test1, type = "text/csv")[6]
c1 <- content(test1, type = "text/csv")
c1[6]
c1[6,]
gsub(pattern = ".+=(.+)<", "\\1", c1[6,])
gsub(pattern = ".+=(.+)<.+", "\\1", c1[6,])
content(test1, type = "text/csv")[6,]
jsId <- gsub(pattern = ".+=(.+)<.+", "\\1", content(test1, type = "text/csv")[6,])
jsId
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("text/xml"))
jsId <- gsub(pattern = ".+=(.+)<.+", "\\1", content(test1, type = "text/csv")[6,])
body2 <- "<Envelope><Body>
<RawRecipientDataExport>
<EVENT_DATE_START>01/01/2015 00:00:00</EVENT_DATE_START>
<EVENT_DATE_END>01/01/2018 23:59:00</EVENT_DATE_END>
<MOVE_TO_FTP/>
<EXPORT_FORMAT>PIPE</EXPORT_FORMAT>
<EMAIL>aliarsalan.kazmi@aimia.com</EMAIL>
<ALL_EVENT_TYPES/>
<EXCLUDE_DELETED/>
<COLUMN>
<NAME>CustomerID</NAME>
</COLUMN>
<COLUMN>
<NAME>Address</NAME>
</COLUMN>
<RETURN_MAILING_NAME/>
</RawRecipientDataExport>
</Body></Envelope>"
test2 <- POST(url = ibmUrl, body = body2, verbose(), content_type("text/xml"), add_headers(jsessionid = jsId))
content(test2)
content(test1)$cookies
content(test1)
cache_info(test1)
rerequest(test1)
jsId <- gsub(pattern = ".+=(.+)<.+", "\\1", content(test1, type = "text/csv")[6,])
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("text/xml"))
jsId <- gsub(pattern = ".+=(.+)<.+", "\\1", content(test1, type = "text/csv")[6,])
httr_options
?httr_options
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("text/xml"), set_cookies())
jsId <- gsub(pattern = ".+=(.+)<.+", "\\1", content(test1, type = "text/csv")[6,])
cookies(test1)
r <- GET("http://httpbin.org/cookies/set", query = list(a = 1, b = 2))
cookies(r)
access_token
ibmUrl <- "https://api3.ibmmarketingcloud/oauth/token"
ibmUrl <- "https://api3.ibmmarketingcloud.com/oauth/token"
clientId <- "2fb47a91-3e34-4b2f-b9b5-93cffbf31500"
clientSecret <- "5b5aa1d0-9fcd-4740-b970-79b059c32a74"
refreshToken <- "rDI5XuVASIqwIOOeJdRHYC71vrLvci64kE1JgDipG8BAS1"
#Request authentication (access token)
reqAccess <- POST(url = ibmUrl,
body = list(grant_type = "refresh_token", client_id = clientId,
client_secret = clientSecret, refresh_token = refreshToken), verbose())
warn_for_status(reqAccess)
access_token <- content(reqAccess)$access_token
ibmUrl <- "api3.silverpop.com/XMLAPI"
body1 <- "<Envelope><Body>
<Login>
<USERNAME>aliarsalan.kazmi@aimia.com</USERNAME>
<PASSWORD>Iamneo456_</PASSWORD>
</Login>
</Body></Envelope>"
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("text/xml"))
jsId <- gsub(pattern = ".+=(.+)<.+", "\\1", content(test1, type = "text/csv")[6,])
body2 <- "<Envelope><Body>
<RawRecipientDataExport>
<EVENT_DATE_START>01/01/2015 00:00:00</EVENT_DATE_START>
<EVENT_DATE_END>01/01/2018 23:59:00</EVENT_DATE_END>
<MOVE_TO_FTP/>
<EXPORT_FORMAT>PIPE</EXPORT_FORMAT>
<EMAIL>aliarsalan.kazmi@aimia.com</EMAIL>
<ALL_EVENT_TYPES/>
<EXCLUDE_DELETED/>
<COLUMN>
<NAME>CustomerID</NAME>
</COLUMN>
<COLUMN>
<NAME>Address</NAME>
</COLUMN>
<RETURN_MAILING_NAME/>
</RawRecipientDataExport>
</Body></Envelope>"
test2 <- POST(url = ibmUrl, body = body2, verbose(), content_type("text/xml"), add_headers(jsessionid = jsId, Authorization = access_token))
content(test2)
paste0(ibmUrl, ";jsessionid=", jsId)
test1 <- POST(url = ibmUrl,
body = body1, verbose(), content_type("text/xml"))
jsId <- gsub(pattern = ".+=(.+)<.+", "\\1", content(test1, type = "text/csv")[6,])
body2 <- "<Envelope><Body>
<RawRecipientDataExport>
<EVENT_DATE_START>01/01/2015 00:00:00</EVENT_DATE_START>
<EVENT_DATE_END>01/01/2018 23:59:00</EVENT_DATE_END>
<MOVE_TO_FTP/>
<EXPORT_FORMAT>PIPE</EXPORT_FORMAT>
<EMAIL>aliarsalan.kazmi@aimia.com</EMAIL>
<ALL_EVENT_TYPES/>
<EXCLUDE_DELETED/>
<COLUMN>
<NAME>CustomerID</NAME>
</COLUMN>
<COLUMN>
<NAME>Address</NAME>
</COLUMN>
<RETURN_MAILING_NAME/>
</RawRecipientDataExport>
</Body></Envelope>"
test2 <- POST(url = paste0(ibmUrl, ";jsessionid=", jsId), body = body2, verbose(), content_type("text/xml"))
content(test2)
?source
match("ok", filesError)
?match
?vector
vector(mode = "character", length = 0)
setwd("C:\\Users\\kazami\\Documents\\GitHub\\Aimia-Projects\\Air-Miles\\Air-Miles-Reboot")
shinyapps::setAccountInfo(name='kazmialiarsalan', token='18A350F0A0A3882E2EB0D301BD6BA770', secret='nGq0VmgRey/V7nQqxLmVt4wO5j7jyuU0rzAb9Dbr')
library(shinyapps)
library(rsconnect)
library(rsconnect)
install.packages("rsconnect", dependencies = TRUE)
deployApp()
deployApp()
